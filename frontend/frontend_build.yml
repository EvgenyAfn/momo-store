stages:
  - build
  - test
  - release
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
 
build-frontend-image:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-frontend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:$VERSION

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  needs: []
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey="${SONAR_FRONTEND_PROJECT_KEY}"
      -Dsonar.sources=.
      -Dsonar.host.url="${SONAR_URL}"
      -Dsonar.login="${SONAR_FRONTEND_TOKEN}"
      -Dsonar.qualitygate.wait=false

eslint-sast:
  stage: test
  needs: []

gosec-sast:
  stage: test
  needs: []

nodejs-scan-sast:
  stage: test
  needs: []

semgrep-sast:
  stage: test
  needs: []

spotbugs-sast:
  stage: test
  rules:
    - when: never

release-frontend-image-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-frontend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/momo-frontend:$VERSION $CI_REGISTRY_IMAGE/momo-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:latest

release-frontend-helm-chart:
  stage: release
  image: alpine/helm:latest
  script:
    - cd infrastructure/helm
    - sed -i "s/{{TAG}}/$VERSION/" momo-store/charts/frontend/values.yaml
    - sed -i "s/{{VERSION}}/$VERSION/" momo-store/charts/frontend/Chart.yaml
    - helm package  momo-store/charts/frontend/ --version ${VERSION}
    - curl -u ${NEXUS_USER}:${NEXUS_PASSWORD} ${NEXUS_REPO_FRONTEND_HELM} --upload-file frontend-${VERSION}.tgz

install-frontend-helm-chart:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  image: alpine/helm:latest
  rules:
    - when: manual
  needs:
    - release-frontend-helm-chart
  before_script:
    - mkdir ~/.kube
    - cat ${KUBECONFIG} | base64 -d > ~/.kube/config
    - cat ${capem} | base64 -d > ~/.kube/ca.pem
    - export KUBECONFIG=~/.kube/config
    - chmod 644 ~/.kube/config ~/.kube/ca.pem
  script:
    - kubectl config get-contexts
    - helm repo add nexus ${NEXUS_REPO_FRONTEND_HELM} --username ${NEXUS_USER} --password ${NEXUS_PASSWORD}
    - helm repo update
    - helm list
    - helm upgrade frontend nexus/frontend -i --set image.tag=$VERSION  --atomic --namespace default
  after_script:
    - rm ~/.kube/config
 